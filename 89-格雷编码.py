'''
FilePath: 89-格雷编码.py
Author: Huang_CJ
Date: 2024-05-21 22:23:20
LastEditTime: 2024-05-21 22:53:42
Copyright: 2024 xxxTech CO.,LTD. All Rights Reserved.
Descripttion: n 位格雷码序列 是一个由 2n 个整数组成的序列，其中：
* 每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）
* 第一个整数是 0
* 一个整数在序列中出现 不超过一次
* 每对 相邻 整数的二进制表示 恰好一位不同 ，且第一个 和 最后一个 整数的二进制表示 恰好一位不同
给你一个整数 n ，返回任一有效的 n 位格雷码序列  1 <= n <= 16 。
'''

'''
示例 1：
输入：n = 2
输出：[0,1,3,2]
解释：
[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
- 00 和 01 有一位不同
- 01 和 11 有一位不同
- 11 和 10 有一位不同
- 10 和 00 有一位不同
[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
- 00 和 10 有一位不同
- 10 和 11 有一位不同
- 11 和 01 有一位不同
- 01 和 00 有一位不同
示例 2：
输入：n = 1
输出：[0,1]
'''

class Solution(object):
    def grayCode(self, n):
        """
        :type n: int
        :rtype: List[int]
        """
        if n == 0:
            return [0]
        # 递归获取 n-1 位的格雷码序列
        prev_gray = self.grayCode(n-1)
        result = []
        # 添加前半部分的格雷码序列
        for code in prev_gray:
            result.append(code)
        # 添加后半部分的格雷码序列
        add_on = 1 << (n-1)  # 在最高位添加 1
        for code in reversed(prev_gray):
            result.append(code + add_on)
        return result

# Example usage
solution = Solution()
n = 3
print(solution.grayCode(n))  # Output: [0, 1, 3, 2, 6, 7, 5, 4]



'''示例：
让我们通过生成 3 位格雷码来详细解释。

n = 1:
初始的 1 位格雷码序列是：[0, 1]
二进制表示：[00, 01]
n = 2:
递归获取 1 位的格雷码序列 [0, 1]
前半部分保持不变：[00, 01]
后半部分是在每个数前面加一位1（即 10）
反向遍历 [0, 1] 得到 [1, 0]
在最高位加 1：
1 = 01 + 10 = 11
0 = 00 + 10 = 10
合并得到 2 位格雷码序列 [00, 01, 11, 10]
n = 3:
递归获取 2 位的格雷码序列 [00, 01, 11, 10]
前半部分保持不变：[000, 001, 011, 010]
后半部分是在每个数前面加一位1（即 100）
反向遍历 [00, 01, 11, 10] 得到 [10, 11, 01, 00]
在最高位加 1：
10 = 010 + 100 = 110
11 = 011 + 100 = 111
01 = 001 + 100 = 101
00 = 000 + 100 = 100
合并得到 3 位格雷码序列 [000, 001, 011, 010, 110, 111, 101, 100]
对应的十进制数：
3 位格雷码序列的十进制表示：[0, 1, 3, 2, 6, 7, 5, 4]
'''